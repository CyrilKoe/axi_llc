// Copyright lowRISC contributors.
// Licensed under the Apache License, Version 2.0, see LICENSE for details.
// SPDX-License-Identifier: Apache-2.0
//
// Register Top module auto-generated by `reggen`


`include "common_cells/assertions.svh"

module axi_llc_reg_top #(
    parameter type reg_req_t = logic,
    parameter type reg_rsp_t = logic,
    parameter int AW = 9
) (
  input clk_i,
  input rst_ni,
  input  reg_req_t reg_req_i,
  output reg_rsp_t reg_rsp_o,
  // To HW
  output axi_llc_reg_pkg::axi_llc_reg2hw_t reg2hw, // Write
  input  axi_llc_reg_pkg::axi_llc_hw2reg_t hw2reg, // Read


  // Config
  input devmode_i // If 1, explicit error return for unmapped register access
);

  import axi_llc_reg_pkg::* ;

  localparam int DW = 32;
  localparam int DBW = DW/8;                    // Byte Width

  // register signals
  logic           reg_we;
  logic           reg_re;
  logic [AW-1:0]  reg_addr;
  logic [DW-1:0]  reg_wdata;
  logic [DBW-1:0] reg_be;
  logic [DW-1:0]  reg_rdata;
  logic           reg_error;

  logic          addrmiss, wr_err;

  logic [DW-1:0] reg_rdata_next;

  // Below register interface can be changed
  reg_req_t  reg_intf_req;
  reg_rsp_t  reg_intf_rsp;


  assign reg_intf_req = reg_req_i;
  assign reg_rsp_o = reg_intf_rsp;


  assign reg_we = reg_intf_req.valid & reg_intf_req.write;
  assign reg_re = reg_intf_req.valid & ~reg_intf_req.write;
  assign reg_addr = reg_intf_req.addr;
  assign reg_wdata = reg_intf_req.wdata;
  assign reg_be = reg_intf_req.wstrb;
  assign reg_intf_rsp.rdata = reg_rdata;
  assign reg_intf_rsp.error = reg_error;
  assign reg_intf_rsp.ready = 1'b1;

  assign reg_rdata = reg_rdata_next ;
  assign reg_error = (devmode_i & addrmiss) | wr_err;


  // Define SW related signals
  // Format: <reg>_<field>_{wd|we|qs}
  //        or <reg>_{wd|we|qs} if field == 1 or 0
  logic [31:0] cfg_spm_low_qs;
  logic [31:0] cfg_spm_low_wd;
  logic cfg_spm_low_we;
  logic [31:0] cfg_spm_high_qs;
  logic [31:0] cfg_spm_high_wd;
  logic cfg_spm_high_we;
  logic [31:0] cfg_flush_low_qs;
  logic [31:0] cfg_flush_low_wd;
  logic cfg_flush_low_we;
  logic [31:0] cfg_flush_high_qs;
  logic [31:0] cfg_flush_high_wd;
  logic cfg_flush_high_we;
  logic commit_cfg_qs;
  logic commit_cfg_wd;
  logic commit_cfg_we;
  logic [31:0] flushed_low_qs;
  logic [31:0] flushed_high_qs;
  logic [31:0] bist_out_low_qs;
  logic [31:0] bist_out_high_qs;
  logic [31:0] set_asso_low_qs;
  logic [31:0] set_asso_high_qs;
  logic [31:0] num_lines_low_qs;
  logic [31:0] num_lines_high_qs;
  logic [31:0] num_blocks_low_qs;
  logic [31:0] num_blocks_high_qs;
  logic [31:0] version_low_qs;
  logic [31:0] version_high_qs;
  logic bist_status_qs;
  logic [31:0] cfg_flush_thread_low_qs;
  logic [31:0] cfg_flush_thread_low_wd;
  logic cfg_flush_thread_low_we;
  logic [31:0] cfg_flush_thread_high_qs;
  logic [31:0] cfg_flush_thread_high_wd;
  logic cfg_flush_thread_high_we;
  logic [31:0] cfg_set_partition0_low_qs;
  logic [31:0] cfg_set_partition0_low_wd;
  logic cfg_set_partition0_low_we;
  logic [31:0] cfg_set_partition0_high_qs;
  logic [31:0] cfg_set_partition0_high_wd;
  logic cfg_set_partition0_high_we;
  logic [31:0] cfg_set_partition1_low_qs;
  logic [31:0] cfg_set_partition1_low_wd;
  logic cfg_set_partition1_low_we;
  logic [31:0] cfg_set_partition1_high_qs;
  logic [31:0] cfg_set_partition1_high_wd;
  logic cfg_set_partition1_high_we;
  logic [31:0] cfg_set_partition2_low_qs;
  logic [31:0] cfg_set_partition2_low_wd;
  logic cfg_set_partition2_low_we;
  logic [31:0] cfg_set_partition2_high_qs;
  logic [31:0] cfg_set_partition2_high_wd;
  logic cfg_set_partition2_high_we;
  logic [31:0] cfg_set_partition3_low_qs;
  logic [31:0] cfg_set_partition3_low_wd;
  logic cfg_set_partition3_low_we;
  logic [31:0] cfg_set_partition3_high_qs;
  logic [31:0] cfg_set_partition3_high_wd;
  logic cfg_set_partition3_high_we;
  logic [31:0] cfg_set_partition4_low_qs;
  logic [31:0] cfg_set_partition4_low_wd;
  logic cfg_set_partition4_low_we;
  logic [31:0] cfg_set_partition4_high_qs;
  logic [31:0] cfg_set_partition4_high_wd;
  logic cfg_set_partition4_high_we;
  logic [31:0] cfg_set_partition5_low_qs;
  logic [31:0] cfg_set_partition5_low_wd;
  logic cfg_set_partition5_low_we;
  logic [31:0] cfg_set_partition5_high_qs;
  logic [31:0] cfg_set_partition5_high_wd;
  logic cfg_set_partition5_high_we;
  logic [31:0] cfg_set_partition6_low_qs;
  logic [31:0] cfg_set_partition6_low_wd;
  logic cfg_set_partition6_low_we;
  logic [31:0] cfg_set_partition6_high_qs;
  logic [31:0] cfg_set_partition6_high_wd;
  logic cfg_set_partition6_high_we;
  logic [31:0] cfg_set_partition7_low_qs;
  logic [31:0] cfg_set_partition7_low_wd;
  logic cfg_set_partition7_low_we;
  logic [31:0] cfg_set_partition7_high_qs;
  logic [31:0] cfg_set_partition7_high_wd;
  logic cfg_set_partition7_high_we;
  logic [31:0] cfg_set_partition8_low_qs;
  logic [31:0] cfg_set_partition8_low_wd;
  logic cfg_set_partition8_low_we;
  logic [31:0] cfg_set_partition8_high_qs;
  logic [31:0] cfg_set_partition8_high_wd;
  logic cfg_set_partition8_high_we;
  logic [31:0] cfg_set_partition9_low_qs;
  logic [31:0] cfg_set_partition9_low_wd;
  logic cfg_set_partition9_low_we;
  logic [31:0] cfg_set_partition9_high_qs;
  logic [31:0] cfg_set_partition9_high_wd;
  logic cfg_set_partition9_high_we;
  logic [31:0] cfg_set_partition10_low_qs;
  logic [31:0] cfg_set_partition10_low_wd;
  logic cfg_set_partition10_low_we;
  logic [31:0] cfg_set_partition10_high_qs;
  logic [31:0] cfg_set_partition10_high_wd;
  logic cfg_set_partition10_high_we;
  logic [31:0] cfg_set_partition11_low_qs;
  logic [31:0] cfg_set_partition11_low_wd;
  logic cfg_set_partition11_low_we;
  logic [31:0] cfg_set_partition11_high_qs;
  logic [31:0] cfg_set_partition11_high_wd;
  logic cfg_set_partition11_high_we;
  logic [31:0] cfg_set_partition12_low_qs;
  logic [31:0] cfg_set_partition12_low_wd;
  logic cfg_set_partition12_low_we;
  logic [31:0] cfg_set_partition12_high_qs;
  logic [31:0] cfg_set_partition12_high_wd;
  logic cfg_set_partition12_high_we;
  logic [31:0] cfg_set_partition13_low_qs;
  logic [31:0] cfg_set_partition13_low_wd;
  logic cfg_set_partition13_low_we;
  logic [31:0] cfg_set_partition13_high_qs;
  logic [31:0] cfg_set_partition13_high_wd;
  logic cfg_set_partition13_high_we;
  logic [31:0] cfg_set_partition14_low_qs;
  logic [31:0] cfg_set_partition14_low_wd;
  logic cfg_set_partition14_low_we;
  logic [31:0] cfg_set_partition14_high_qs;
  logic [31:0] cfg_set_partition14_high_wd;
  logic cfg_set_partition14_high_we;
  logic [31:0] cfg_set_partition15_low_qs;
  logic [31:0] cfg_set_partition15_low_wd;
  logic cfg_set_partition15_low_we;
  logic [31:0] cfg_set_partition15_high_qs;
  logic [31:0] cfg_set_partition15_high_wd;
  logic cfg_set_partition15_high_we;
  logic [31:0] cfg_set_partition16_low_qs;
  logic [31:0] cfg_set_partition16_low_wd;
  logic cfg_set_partition16_low_we;
  logic [31:0] cfg_set_partition16_high_qs;
  logic [31:0] cfg_set_partition16_high_wd;
  logic cfg_set_partition16_high_we;
  logic [31:0] cfg_set_partition17_low_qs;
  logic [31:0] cfg_set_partition17_low_wd;
  logic cfg_set_partition17_low_we;
  logic [31:0] cfg_set_partition17_high_qs;
  logic [31:0] cfg_set_partition17_high_wd;
  logic cfg_set_partition17_high_we;
  logic [31:0] cfg_set_partition18_low_qs;
  logic [31:0] cfg_set_partition18_low_wd;
  logic cfg_set_partition18_low_we;
  logic [31:0] cfg_set_partition18_high_qs;
  logic [31:0] cfg_set_partition18_high_wd;
  logic cfg_set_partition18_high_we;
  logic [31:0] cfg_set_partition19_low_qs;
  logic [31:0] cfg_set_partition19_low_wd;
  logic cfg_set_partition19_low_we;
  logic [31:0] cfg_set_partition19_high_qs;
  logic [31:0] cfg_set_partition19_high_wd;
  logic cfg_set_partition19_high_we;
  logic [31:0] cfg_set_partition20_low_qs;
  logic [31:0] cfg_set_partition20_low_wd;
  logic cfg_set_partition20_low_we;
  logic [31:0] cfg_set_partition20_high_qs;
  logic [31:0] cfg_set_partition20_high_wd;
  logic cfg_set_partition20_high_we;
  logic [31:0] cfg_set_partition21_low_qs;
  logic [31:0] cfg_set_partition21_low_wd;
  logic cfg_set_partition21_low_we;
  logic [31:0] cfg_set_partition21_high_qs;
  logic [31:0] cfg_set_partition21_high_wd;
  logic cfg_set_partition21_high_we;
  logic [31:0] cfg_set_partition22_low_qs;
  logic [31:0] cfg_set_partition22_low_wd;
  logic cfg_set_partition22_low_we;
  logic [31:0] cfg_set_partition22_high_qs;
  logic [31:0] cfg_set_partition22_high_wd;
  logic cfg_set_partition22_high_we;
  logic [31:0] cfg_set_partition23_low_qs;
  logic [31:0] cfg_set_partition23_low_wd;
  logic cfg_set_partition23_low_we;
  logic [31:0] cfg_set_partition23_high_qs;
  logic [31:0] cfg_set_partition23_high_wd;
  logic cfg_set_partition23_high_we;
  logic [31:0] cfg_set_partition24_low_qs;
  logic [31:0] cfg_set_partition24_low_wd;
  logic cfg_set_partition24_low_we;
  logic [31:0] cfg_set_partition24_high_qs;
  logic [31:0] cfg_set_partition24_high_wd;
  logic cfg_set_partition24_high_we;
  logic [31:0] cfg_set_partition25_low_qs;
  logic [31:0] cfg_set_partition25_low_wd;
  logic cfg_set_partition25_low_we;
  logic [31:0] cfg_set_partition25_high_qs;
  logic [31:0] cfg_set_partition25_high_wd;
  logic cfg_set_partition25_high_we;
  logic [31:0] cfg_set_partition26_low_qs;
  logic [31:0] cfg_set_partition26_low_wd;
  logic cfg_set_partition26_low_we;
  logic [31:0] cfg_set_partition26_high_qs;
  logic [31:0] cfg_set_partition26_high_wd;
  logic cfg_set_partition26_high_we;
  logic [31:0] cfg_set_partition27_low_qs;
  logic [31:0] cfg_set_partition27_low_wd;
  logic cfg_set_partition27_low_we;
  logic [31:0] cfg_set_partition27_high_qs;
  logic [31:0] cfg_set_partition27_high_wd;
  logic cfg_set_partition27_high_we;
  logic [31:0] cfg_set_partition28_low_qs;
  logic [31:0] cfg_set_partition28_low_wd;
  logic cfg_set_partition28_low_we;
  logic [31:0] cfg_set_partition28_high_qs;
  logic [31:0] cfg_set_partition28_high_wd;
  logic cfg_set_partition28_high_we;
  logic [31:0] cfg_set_partition29_low_qs;
  logic [31:0] cfg_set_partition29_low_wd;
  logic cfg_set_partition29_low_we;
  logic [31:0] cfg_set_partition29_high_qs;
  logic [31:0] cfg_set_partition29_high_wd;
  logic cfg_set_partition29_high_we;
  logic [31:0] cfg_set_partition30_low_qs;
  logic [31:0] cfg_set_partition30_low_wd;
  logic cfg_set_partition30_low_we;
  logic [31:0] cfg_set_partition30_high_qs;
  logic [31:0] cfg_set_partition30_high_wd;
  logic cfg_set_partition30_high_we;
  logic [31:0] cfg_set_partition31_low_qs;
  logic [31:0] cfg_set_partition31_low_wd;
  logic cfg_set_partition31_low_we;
  logic [31:0] cfg_set_partition31_high_qs;
  logic [31:0] cfg_set_partition31_high_wd;
  logic cfg_set_partition31_high_we;
  logic commit_partition_cfg_qs;
  logic commit_partition_cfg_wd;
  logic commit_partition_cfg_we;
  logic [31:0] flushed_set0_low_qs;
  logic [31:0] flushed_set0_high_qs;
  logic [31:0] flushed_set1_low_qs;
  logic [31:0] flushed_set1_high_qs;
  logic [31:0] flushed_set2_low_qs;
  logic [31:0] flushed_set2_high_qs;
  logic [31:0] flushed_set3_low_qs;
  logic [31:0] flushed_set3_high_qs;

  // Register instances
  // R[cfg_spm_low]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_cfg_spm_low (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (cfg_spm_low_we),
    .wd     (cfg_spm_low_wd),

    // from internal hardware
    .de     (hw2reg.cfg_spm_low.de),
    .d      (hw2reg.cfg_spm_low.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.cfg_spm_low.q ),

    // to register interface (read)
    .qs     (cfg_spm_low_qs)
  );


  // R[cfg_spm_high]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_cfg_spm_high (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (cfg_spm_high_we),
    .wd     (cfg_spm_high_wd),

    // from internal hardware
    .de     (hw2reg.cfg_spm_high.de),
    .d      (hw2reg.cfg_spm_high.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.cfg_spm_high.q ),

    // to register interface (read)
    .qs     (cfg_spm_high_qs)
  );


  // R[cfg_flush_low]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_cfg_flush_low (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (cfg_flush_low_we),
    .wd     (cfg_flush_low_wd),

    // from internal hardware
    .de     (hw2reg.cfg_flush_low.de),
    .d      (hw2reg.cfg_flush_low.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.cfg_flush_low.q ),

    // to register interface (read)
    .qs     (cfg_flush_low_qs)
  );


  // R[cfg_flush_high]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_cfg_flush_high (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (cfg_flush_high_we),
    .wd     (cfg_flush_high_wd),

    // from internal hardware
    .de     (hw2reg.cfg_flush_high.de),
    .d      (hw2reg.cfg_flush_high.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.cfg_flush_high.q ),

    // to register interface (read)
    .qs     (cfg_flush_high_qs)
  );


  // R[commit_cfg]: V(False)

  prim_subreg #(
    .DW      (1),
    .SWACCESS("W1S"),
    .RESVAL  (1'h0)
  ) u_commit_cfg (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (commit_cfg_we),
    .wd     (commit_cfg_wd),

    // from internal hardware
    .de     (hw2reg.commit_cfg.de),
    .d      (hw2reg.commit_cfg.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.commit_cfg.q ),

    // to register interface (read)
    .qs     (commit_cfg_qs)
  );


  // R[flushed_low]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RO"),
    .RESVAL  (32'h0)
  ) u_flushed_low (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (hw2reg.flushed_low.de),
    .d      (hw2reg.flushed_low.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.flushed_low.q ),

    // to register interface (read)
    .qs     (flushed_low_qs)
  );


  // R[flushed_high]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RO"),
    .RESVAL  (32'h0)
  ) u_flushed_high (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (hw2reg.flushed_high.de),
    .d      (hw2reg.flushed_high.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.flushed_high.q ),

    // to register interface (read)
    .qs     (flushed_high_qs)
  );


  // R[bist_out_low]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RO"),
    .RESVAL  (32'h0)
  ) u_bist_out_low (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (hw2reg.bist_out_low.de),
    .d      (hw2reg.bist_out_low.d ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (bist_out_low_qs)
  );


  // R[bist_out_high]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RO"),
    .RESVAL  (32'h0)
  ) u_bist_out_high (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (hw2reg.bist_out_high.de),
    .d      (hw2reg.bist_out_high.d ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (bist_out_high_qs)
  );


  // R[set_asso_low]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RO"),
    .RESVAL  (32'h0)
  ) u_set_asso_low (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (hw2reg.set_asso_low.de),
    .d      (hw2reg.set_asso_low.d ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (set_asso_low_qs)
  );


  // R[set_asso_high]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RO"),
    .RESVAL  (32'h0)
  ) u_set_asso_high (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (hw2reg.set_asso_high.de),
    .d      (hw2reg.set_asso_high.d ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (set_asso_high_qs)
  );


  // R[num_lines_low]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RO"),
    .RESVAL  (32'h0)
  ) u_num_lines_low (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (hw2reg.num_lines_low.de),
    .d      (hw2reg.num_lines_low.d ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (num_lines_low_qs)
  );


  // R[num_lines_high]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RO"),
    .RESVAL  (32'h0)
  ) u_num_lines_high (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (hw2reg.num_lines_high.de),
    .d      (hw2reg.num_lines_high.d ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (num_lines_high_qs)
  );


  // R[num_blocks_low]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RO"),
    .RESVAL  (32'h0)
  ) u_num_blocks_low (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (hw2reg.num_blocks_low.de),
    .d      (hw2reg.num_blocks_low.d ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (num_blocks_low_qs)
  );


  // R[num_blocks_high]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RO"),
    .RESVAL  (32'h0)
  ) u_num_blocks_high (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (hw2reg.num_blocks_high.de),
    .d      (hw2reg.num_blocks_high.d ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (num_blocks_high_qs)
  );


  // R[version_low]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RO"),
    .RESVAL  (32'h0)
  ) u_version_low (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (hw2reg.version_low.de),
    .d      (hw2reg.version_low.d ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (version_low_qs)
  );


  // R[version_high]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RO"),
    .RESVAL  (32'h0)
  ) u_version_high (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (hw2reg.version_high.de),
    .d      (hw2reg.version_high.d ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (version_high_qs)
  );


  // R[bist_status]: V(False)

  prim_subreg #(
    .DW      (1),
    .SWACCESS("RO"),
    .RESVAL  (1'h0)
  ) u_bist_status (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (hw2reg.bist_status.de),
    .d      (hw2reg.bist_status.d ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (bist_status_qs)
  );


  // R[cfg_flush_thread_low]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'hffffffff)
  ) u_cfg_flush_thread_low (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (cfg_flush_thread_low_we),
    .wd     (cfg_flush_thread_low_wd),

    // from internal hardware
    .de     (hw2reg.cfg_flush_thread_low.de),
    .d      (hw2reg.cfg_flush_thread_low.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.cfg_flush_thread_low.q ),

    // to register interface (read)
    .qs     (cfg_flush_thread_low_qs)
  );


  // R[cfg_flush_thread_high]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'hffffffff)
  ) u_cfg_flush_thread_high (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (cfg_flush_thread_high_we),
    .wd     (cfg_flush_thread_high_wd),

    // from internal hardware
    .de     (hw2reg.cfg_flush_thread_high.de),
    .d      (hw2reg.cfg_flush_thread_high.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.cfg_flush_thread_high.q ),

    // to register interface (read)
    .qs     (cfg_flush_thread_high_qs)
  );


  // R[cfg_set_partition0_low]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_cfg_set_partition0_low (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (cfg_set_partition0_low_we),
    .wd     (cfg_set_partition0_low_wd),

    // from internal hardware
    .de     (hw2reg.cfg_set_partition0_low.de),
    .d      (hw2reg.cfg_set_partition0_low.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.cfg_set_partition0_low.q ),

    // to register interface (read)
    .qs     (cfg_set_partition0_low_qs)
  );


  // R[cfg_set_partition0_high]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_cfg_set_partition0_high (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (cfg_set_partition0_high_we),
    .wd     (cfg_set_partition0_high_wd),

    // from internal hardware
    .de     (hw2reg.cfg_set_partition0_high.de),
    .d      (hw2reg.cfg_set_partition0_high.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.cfg_set_partition0_high.q ),

    // to register interface (read)
    .qs     (cfg_set_partition0_high_qs)
  );


  // R[cfg_set_partition1_low]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_cfg_set_partition1_low (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (cfg_set_partition1_low_we),
    .wd     (cfg_set_partition1_low_wd),

    // from internal hardware
    .de     (hw2reg.cfg_set_partition1_low.de),
    .d      (hw2reg.cfg_set_partition1_low.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.cfg_set_partition1_low.q ),

    // to register interface (read)
    .qs     (cfg_set_partition1_low_qs)
  );


  // R[cfg_set_partition1_high]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_cfg_set_partition1_high (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (cfg_set_partition1_high_we),
    .wd     (cfg_set_partition1_high_wd),

    // from internal hardware
    .de     (hw2reg.cfg_set_partition1_high.de),
    .d      (hw2reg.cfg_set_partition1_high.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.cfg_set_partition1_high.q ),

    // to register interface (read)
    .qs     (cfg_set_partition1_high_qs)
  );


  // R[cfg_set_partition2_low]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_cfg_set_partition2_low (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (cfg_set_partition2_low_we),
    .wd     (cfg_set_partition2_low_wd),

    // from internal hardware
    .de     (hw2reg.cfg_set_partition2_low.de),
    .d      (hw2reg.cfg_set_partition2_low.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.cfg_set_partition2_low.q ),

    // to register interface (read)
    .qs     (cfg_set_partition2_low_qs)
  );


  // R[cfg_set_partition2_high]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_cfg_set_partition2_high (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (cfg_set_partition2_high_we),
    .wd     (cfg_set_partition2_high_wd),

    // from internal hardware
    .de     (hw2reg.cfg_set_partition2_high.de),
    .d      (hw2reg.cfg_set_partition2_high.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.cfg_set_partition2_high.q ),

    // to register interface (read)
    .qs     (cfg_set_partition2_high_qs)
  );


  // R[cfg_set_partition3_low]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_cfg_set_partition3_low (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (cfg_set_partition3_low_we),
    .wd     (cfg_set_partition3_low_wd),

    // from internal hardware
    .de     (hw2reg.cfg_set_partition3_low.de),
    .d      (hw2reg.cfg_set_partition3_low.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.cfg_set_partition3_low.q ),

    // to register interface (read)
    .qs     (cfg_set_partition3_low_qs)
  );


  // R[cfg_set_partition3_high]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_cfg_set_partition3_high (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (cfg_set_partition3_high_we),
    .wd     (cfg_set_partition3_high_wd),

    // from internal hardware
    .de     (hw2reg.cfg_set_partition3_high.de),
    .d      (hw2reg.cfg_set_partition3_high.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.cfg_set_partition3_high.q ),

    // to register interface (read)
    .qs     (cfg_set_partition3_high_qs)
  );


  // R[cfg_set_partition4_low]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_cfg_set_partition4_low (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (cfg_set_partition4_low_we),
    .wd     (cfg_set_partition4_low_wd),

    // from internal hardware
    .de     (hw2reg.cfg_set_partition4_low.de),
    .d      (hw2reg.cfg_set_partition4_low.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.cfg_set_partition4_low.q ),

    // to register interface (read)
    .qs     (cfg_set_partition4_low_qs)
  );


  // R[cfg_set_partition4_high]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_cfg_set_partition4_high (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (cfg_set_partition4_high_we),
    .wd     (cfg_set_partition4_high_wd),

    // from internal hardware
    .de     (hw2reg.cfg_set_partition4_high.de),
    .d      (hw2reg.cfg_set_partition4_high.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.cfg_set_partition4_high.q ),

    // to register interface (read)
    .qs     (cfg_set_partition4_high_qs)
  );


  // R[cfg_set_partition5_low]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_cfg_set_partition5_low (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (cfg_set_partition5_low_we),
    .wd     (cfg_set_partition5_low_wd),

    // from internal hardware
    .de     (hw2reg.cfg_set_partition5_low.de),
    .d      (hw2reg.cfg_set_partition5_low.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.cfg_set_partition5_low.q ),

    // to register interface (read)
    .qs     (cfg_set_partition5_low_qs)
  );


  // R[cfg_set_partition5_high]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_cfg_set_partition5_high (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (cfg_set_partition5_high_we),
    .wd     (cfg_set_partition5_high_wd),

    // from internal hardware
    .de     (hw2reg.cfg_set_partition5_high.de),
    .d      (hw2reg.cfg_set_partition5_high.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.cfg_set_partition5_high.q ),

    // to register interface (read)
    .qs     (cfg_set_partition5_high_qs)
  );


  // R[cfg_set_partition6_low]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_cfg_set_partition6_low (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (cfg_set_partition6_low_we),
    .wd     (cfg_set_partition6_low_wd),

    // from internal hardware
    .de     (hw2reg.cfg_set_partition6_low.de),
    .d      (hw2reg.cfg_set_partition6_low.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.cfg_set_partition6_low.q ),

    // to register interface (read)
    .qs     (cfg_set_partition6_low_qs)
  );


  // R[cfg_set_partition6_high]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_cfg_set_partition6_high (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (cfg_set_partition6_high_we),
    .wd     (cfg_set_partition6_high_wd),

    // from internal hardware
    .de     (hw2reg.cfg_set_partition6_high.de),
    .d      (hw2reg.cfg_set_partition6_high.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.cfg_set_partition6_high.q ),

    // to register interface (read)
    .qs     (cfg_set_partition6_high_qs)
  );


  // R[cfg_set_partition7_low]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_cfg_set_partition7_low (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (cfg_set_partition7_low_we),
    .wd     (cfg_set_partition7_low_wd),

    // from internal hardware
    .de     (hw2reg.cfg_set_partition7_low.de),
    .d      (hw2reg.cfg_set_partition7_low.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.cfg_set_partition7_low.q ),

    // to register interface (read)
    .qs     (cfg_set_partition7_low_qs)
  );


  // R[cfg_set_partition7_high]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_cfg_set_partition7_high (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (cfg_set_partition7_high_we),
    .wd     (cfg_set_partition7_high_wd),

    // from internal hardware
    .de     (hw2reg.cfg_set_partition7_high.de),
    .d      (hw2reg.cfg_set_partition7_high.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.cfg_set_partition7_high.q ),

    // to register interface (read)
    .qs     (cfg_set_partition7_high_qs)
  );


  // R[cfg_set_partition8_low]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_cfg_set_partition8_low (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (cfg_set_partition8_low_we),
    .wd     (cfg_set_partition8_low_wd),

    // from internal hardware
    .de     (hw2reg.cfg_set_partition8_low.de),
    .d      (hw2reg.cfg_set_partition8_low.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.cfg_set_partition8_low.q ),

    // to register interface (read)
    .qs     (cfg_set_partition8_low_qs)
  );


  // R[cfg_set_partition8_high]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_cfg_set_partition8_high (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (cfg_set_partition8_high_we),
    .wd     (cfg_set_partition8_high_wd),

    // from internal hardware
    .de     (hw2reg.cfg_set_partition8_high.de),
    .d      (hw2reg.cfg_set_partition8_high.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.cfg_set_partition8_high.q ),

    // to register interface (read)
    .qs     (cfg_set_partition8_high_qs)
  );


  // R[cfg_set_partition9_low]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_cfg_set_partition9_low (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (cfg_set_partition9_low_we),
    .wd     (cfg_set_partition9_low_wd),

    // from internal hardware
    .de     (hw2reg.cfg_set_partition9_low.de),
    .d      (hw2reg.cfg_set_partition9_low.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.cfg_set_partition9_low.q ),

    // to register interface (read)
    .qs     (cfg_set_partition9_low_qs)
  );


  // R[cfg_set_partition9_high]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_cfg_set_partition9_high (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (cfg_set_partition9_high_we),
    .wd     (cfg_set_partition9_high_wd),

    // from internal hardware
    .de     (hw2reg.cfg_set_partition9_high.de),
    .d      (hw2reg.cfg_set_partition9_high.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.cfg_set_partition9_high.q ),

    // to register interface (read)
    .qs     (cfg_set_partition9_high_qs)
  );


  // R[cfg_set_partition10_low]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_cfg_set_partition10_low (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (cfg_set_partition10_low_we),
    .wd     (cfg_set_partition10_low_wd),

    // from internal hardware
    .de     (hw2reg.cfg_set_partition10_low.de),
    .d      (hw2reg.cfg_set_partition10_low.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.cfg_set_partition10_low.q ),

    // to register interface (read)
    .qs     (cfg_set_partition10_low_qs)
  );


  // R[cfg_set_partition10_high]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_cfg_set_partition10_high (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (cfg_set_partition10_high_we),
    .wd     (cfg_set_partition10_high_wd),

    // from internal hardware
    .de     (hw2reg.cfg_set_partition10_high.de),
    .d      (hw2reg.cfg_set_partition10_high.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.cfg_set_partition10_high.q ),

    // to register interface (read)
    .qs     (cfg_set_partition10_high_qs)
  );


  // R[cfg_set_partition11_low]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_cfg_set_partition11_low (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (cfg_set_partition11_low_we),
    .wd     (cfg_set_partition11_low_wd),

    // from internal hardware
    .de     (hw2reg.cfg_set_partition11_low.de),
    .d      (hw2reg.cfg_set_partition11_low.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.cfg_set_partition11_low.q ),

    // to register interface (read)
    .qs     (cfg_set_partition11_low_qs)
  );


  // R[cfg_set_partition11_high]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_cfg_set_partition11_high (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (cfg_set_partition11_high_we),
    .wd     (cfg_set_partition11_high_wd),

    // from internal hardware
    .de     (hw2reg.cfg_set_partition11_high.de),
    .d      (hw2reg.cfg_set_partition11_high.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.cfg_set_partition11_high.q ),

    // to register interface (read)
    .qs     (cfg_set_partition11_high_qs)
  );


  // R[cfg_set_partition12_low]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_cfg_set_partition12_low (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (cfg_set_partition12_low_we),
    .wd     (cfg_set_partition12_low_wd),

    // from internal hardware
    .de     (hw2reg.cfg_set_partition12_low.de),
    .d      (hw2reg.cfg_set_partition12_low.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.cfg_set_partition12_low.q ),

    // to register interface (read)
    .qs     (cfg_set_partition12_low_qs)
  );


  // R[cfg_set_partition12_high]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_cfg_set_partition12_high (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (cfg_set_partition12_high_we),
    .wd     (cfg_set_partition12_high_wd),

    // from internal hardware
    .de     (hw2reg.cfg_set_partition12_high.de),
    .d      (hw2reg.cfg_set_partition12_high.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.cfg_set_partition12_high.q ),

    // to register interface (read)
    .qs     (cfg_set_partition12_high_qs)
  );


  // R[cfg_set_partition13_low]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_cfg_set_partition13_low (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (cfg_set_partition13_low_we),
    .wd     (cfg_set_partition13_low_wd),

    // from internal hardware
    .de     (hw2reg.cfg_set_partition13_low.de),
    .d      (hw2reg.cfg_set_partition13_low.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.cfg_set_partition13_low.q ),

    // to register interface (read)
    .qs     (cfg_set_partition13_low_qs)
  );


  // R[cfg_set_partition13_high]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_cfg_set_partition13_high (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (cfg_set_partition13_high_we),
    .wd     (cfg_set_partition13_high_wd),

    // from internal hardware
    .de     (hw2reg.cfg_set_partition13_high.de),
    .d      (hw2reg.cfg_set_partition13_high.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.cfg_set_partition13_high.q ),

    // to register interface (read)
    .qs     (cfg_set_partition13_high_qs)
  );


  // R[cfg_set_partition14_low]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_cfg_set_partition14_low (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (cfg_set_partition14_low_we),
    .wd     (cfg_set_partition14_low_wd),

    // from internal hardware
    .de     (hw2reg.cfg_set_partition14_low.de),
    .d      (hw2reg.cfg_set_partition14_low.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.cfg_set_partition14_low.q ),

    // to register interface (read)
    .qs     (cfg_set_partition14_low_qs)
  );


  // R[cfg_set_partition14_high]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_cfg_set_partition14_high (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (cfg_set_partition14_high_we),
    .wd     (cfg_set_partition14_high_wd),

    // from internal hardware
    .de     (hw2reg.cfg_set_partition14_high.de),
    .d      (hw2reg.cfg_set_partition14_high.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.cfg_set_partition14_high.q ),

    // to register interface (read)
    .qs     (cfg_set_partition14_high_qs)
  );


  // R[cfg_set_partition15_low]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_cfg_set_partition15_low (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (cfg_set_partition15_low_we),
    .wd     (cfg_set_partition15_low_wd),

    // from internal hardware
    .de     (hw2reg.cfg_set_partition15_low.de),
    .d      (hw2reg.cfg_set_partition15_low.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.cfg_set_partition15_low.q ),

    // to register interface (read)
    .qs     (cfg_set_partition15_low_qs)
  );


  // R[cfg_set_partition15_high]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_cfg_set_partition15_high (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (cfg_set_partition15_high_we),
    .wd     (cfg_set_partition15_high_wd),

    // from internal hardware
    .de     (hw2reg.cfg_set_partition15_high.de),
    .d      (hw2reg.cfg_set_partition15_high.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.cfg_set_partition15_high.q ),

    // to register interface (read)
    .qs     (cfg_set_partition15_high_qs)
  );


  // R[cfg_set_partition16_low]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_cfg_set_partition16_low (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (cfg_set_partition16_low_we),
    .wd     (cfg_set_partition16_low_wd),

    // from internal hardware
    .de     (hw2reg.cfg_set_partition16_low.de),
    .d      (hw2reg.cfg_set_partition16_low.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.cfg_set_partition16_low.q ),

    // to register interface (read)
    .qs     (cfg_set_partition16_low_qs)
  );


  // R[cfg_set_partition16_high]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_cfg_set_partition16_high (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (cfg_set_partition16_high_we),
    .wd     (cfg_set_partition16_high_wd),

    // from internal hardware
    .de     (hw2reg.cfg_set_partition16_high.de),
    .d      (hw2reg.cfg_set_partition16_high.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.cfg_set_partition16_high.q ),

    // to register interface (read)
    .qs     (cfg_set_partition16_high_qs)
  );


  // R[cfg_set_partition17_low]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_cfg_set_partition17_low (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (cfg_set_partition17_low_we),
    .wd     (cfg_set_partition17_low_wd),

    // from internal hardware
    .de     (hw2reg.cfg_set_partition17_low.de),
    .d      (hw2reg.cfg_set_partition17_low.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.cfg_set_partition17_low.q ),

    // to register interface (read)
    .qs     (cfg_set_partition17_low_qs)
  );


  // R[cfg_set_partition17_high]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_cfg_set_partition17_high (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (cfg_set_partition17_high_we),
    .wd     (cfg_set_partition17_high_wd),

    // from internal hardware
    .de     (hw2reg.cfg_set_partition17_high.de),
    .d      (hw2reg.cfg_set_partition17_high.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.cfg_set_partition17_high.q ),

    // to register interface (read)
    .qs     (cfg_set_partition17_high_qs)
  );


  // R[cfg_set_partition18_low]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_cfg_set_partition18_low (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (cfg_set_partition18_low_we),
    .wd     (cfg_set_partition18_low_wd),

    // from internal hardware
    .de     (hw2reg.cfg_set_partition18_low.de),
    .d      (hw2reg.cfg_set_partition18_low.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.cfg_set_partition18_low.q ),

    // to register interface (read)
    .qs     (cfg_set_partition18_low_qs)
  );


  // R[cfg_set_partition18_high]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_cfg_set_partition18_high (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (cfg_set_partition18_high_we),
    .wd     (cfg_set_partition18_high_wd),

    // from internal hardware
    .de     (hw2reg.cfg_set_partition18_high.de),
    .d      (hw2reg.cfg_set_partition18_high.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.cfg_set_partition18_high.q ),

    // to register interface (read)
    .qs     (cfg_set_partition18_high_qs)
  );


  // R[cfg_set_partition19_low]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_cfg_set_partition19_low (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (cfg_set_partition19_low_we),
    .wd     (cfg_set_partition19_low_wd),

    // from internal hardware
    .de     (hw2reg.cfg_set_partition19_low.de),
    .d      (hw2reg.cfg_set_partition19_low.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.cfg_set_partition19_low.q ),

    // to register interface (read)
    .qs     (cfg_set_partition19_low_qs)
  );


  // R[cfg_set_partition19_high]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_cfg_set_partition19_high (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (cfg_set_partition19_high_we),
    .wd     (cfg_set_partition19_high_wd),

    // from internal hardware
    .de     (hw2reg.cfg_set_partition19_high.de),
    .d      (hw2reg.cfg_set_partition19_high.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.cfg_set_partition19_high.q ),

    // to register interface (read)
    .qs     (cfg_set_partition19_high_qs)
  );


  // R[cfg_set_partition20_low]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_cfg_set_partition20_low (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (cfg_set_partition20_low_we),
    .wd     (cfg_set_partition20_low_wd),

    // from internal hardware
    .de     (hw2reg.cfg_set_partition20_low.de),
    .d      (hw2reg.cfg_set_partition20_low.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.cfg_set_partition20_low.q ),

    // to register interface (read)
    .qs     (cfg_set_partition20_low_qs)
  );


  // R[cfg_set_partition20_high]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_cfg_set_partition20_high (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (cfg_set_partition20_high_we),
    .wd     (cfg_set_partition20_high_wd),

    // from internal hardware
    .de     (hw2reg.cfg_set_partition20_high.de),
    .d      (hw2reg.cfg_set_partition20_high.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.cfg_set_partition20_high.q ),

    // to register interface (read)
    .qs     (cfg_set_partition20_high_qs)
  );


  // R[cfg_set_partition21_low]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_cfg_set_partition21_low (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (cfg_set_partition21_low_we),
    .wd     (cfg_set_partition21_low_wd),

    // from internal hardware
    .de     (hw2reg.cfg_set_partition21_low.de),
    .d      (hw2reg.cfg_set_partition21_low.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.cfg_set_partition21_low.q ),

    // to register interface (read)
    .qs     (cfg_set_partition21_low_qs)
  );


  // R[cfg_set_partition21_high]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_cfg_set_partition21_high (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (cfg_set_partition21_high_we),
    .wd     (cfg_set_partition21_high_wd),

    // from internal hardware
    .de     (hw2reg.cfg_set_partition21_high.de),
    .d      (hw2reg.cfg_set_partition21_high.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.cfg_set_partition21_high.q ),

    // to register interface (read)
    .qs     (cfg_set_partition21_high_qs)
  );


  // R[cfg_set_partition22_low]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_cfg_set_partition22_low (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (cfg_set_partition22_low_we),
    .wd     (cfg_set_partition22_low_wd),

    // from internal hardware
    .de     (hw2reg.cfg_set_partition22_low.de),
    .d      (hw2reg.cfg_set_partition22_low.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.cfg_set_partition22_low.q ),

    // to register interface (read)
    .qs     (cfg_set_partition22_low_qs)
  );


  // R[cfg_set_partition22_high]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_cfg_set_partition22_high (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (cfg_set_partition22_high_we),
    .wd     (cfg_set_partition22_high_wd),

    // from internal hardware
    .de     (hw2reg.cfg_set_partition22_high.de),
    .d      (hw2reg.cfg_set_partition22_high.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.cfg_set_partition22_high.q ),

    // to register interface (read)
    .qs     (cfg_set_partition22_high_qs)
  );


  // R[cfg_set_partition23_low]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_cfg_set_partition23_low (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (cfg_set_partition23_low_we),
    .wd     (cfg_set_partition23_low_wd),

    // from internal hardware
    .de     (hw2reg.cfg_set_partition23_low.de),
    .d      (hw2reg.cfg_set_partition23_low.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.cfg_set_partition23_low.q ),

    // to register interface (read)
    .qs     (cfg_set_partition23_low_qs)
  );


  // R[cfg_set_partition23_high]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_cfg_set_partition23_high (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (cfg_set_partition23_high_we),
    .wd     (cfg_set_partition23_high_wd),

    // from internal hardware
    .de     (hw2reg.cfg_set_partition23_high.de),
    .d      (hw2reg.cfg_set_partition23_high.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.cfg_set_partition23_high.q ),

    // to register interface (read)
    .qs     (cfg_set_partition23_high_qs)
  );


  // R[cfg_set_partition24_low]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_cfg_set_partition24_low (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (cfg_set_partition24_low_we),
    .wd     (cfg_set_partition24_low_wd),

    // from internal hardware
    .de     (hw2reg.cfg_set_partition24_low.de),
    .d      (hw2reg.cfg_set_partition24_low.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.cfg_set_partition24_low.q ),

    // to register interface (read)
    .qs     (cfg_set_partition24_low_qs)
  );


  // R[cfg_set_partition24_high]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_cfg_set_partition24_high (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (cfg_set_partition24_high_we),
    .wd     (cfg_set_partition24_high_wd),

    // from internal hardware
    .de     (hw2reg.cfg_set_partition24_high.de),
    .d      (hw2reg.cfg_set_partition24_high.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.cfg_set_partition24_high.q ),

    // to register interface (read)
    .qs     (cfg_set_partition24_high_qs)
  );


  // R[cfg_set_partition25_low]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_cfg_set_partition25_low (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (cfg_set_partition25_low_we),
    .wd     (cfg_set_partition25_low_wd),

    // from internal hardware
    .de     (hw2reg.cfg_set_partition25_low.de),
    .d      (hw2reg.cfg_set_partition25_low.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.cfg_set_partition25_low.q ),

    // to register interface (read)
    .qs     (cfg_set_partition25_low_qs)
  );


  // R[cfg_set_partition25_high]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_cfg_set_partition25_high (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (cfg_set_partition25_high_we),
    .wd     (cfg_set_partition25_high_wd),

    // from internal hardware
    .de     (hw2reg.cfg_set_partition25_high.de),
    .d      (hw2reg.cfg_set_partition25_high.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.cfg_set_partition25_high.q ),

    // to register interface (read)
    .qs     (cfg_set_partition25_high_qs)
  );


  // R[cfg_set_partition26_low]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_cfg_set_partition26_low (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (cfg_set_partition26_low_we),
    .wd     (cfg_set_partition26_low_wd),

    // from internal hardware
    .de     (hw2reg.cfg_set_partition26_low.de),
    .d      (hw2reg.cfg_set_partition26_low.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.cfg_set_partition26_low.q ),

    // to register interface (read)
    .qs     (cfg_set_partition26_low_qs)
  );


  // R[cfg_set_partition26_high]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_cfg_set_partition26_high (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (cfg_set_partition26_high_we),
    .wd     (cfg_set_partition26_high_wd),

    // from internal hardware
    .de     (hw2reg.cfg_set_partition26_high.de),
    .d      (hw2reg.cfg_set_partition26_high.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.cfg_set_partition26_high.q ),

    // to register interface (read)
    .qs     (cfg_set_partition26_high_qs)
  );


  // R[cfg_set_partition27_low]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_cfg_set_partition27_low (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (cfg_set_partition27_low_we),
    .wd     (cfg_set_partition27_low_wd),

    // from internal hardware
    .de     (hw2reg.cfg_set_partition27_low.de),
    .d      (hw2reg.cfg_set_partition27_low.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.cfg_set_partition27_low.q ),

    // to register interface (read)
    .qs     (cfg_set_partition27_low_qs)
  );


  // R[cfg_set_partition27_high]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_cfg_set_partition27_high (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (cfg_set_partition27_high_we),
    .wd     (cfg_set_partition27_high_wd),

    // from internal hardware
    .de     (hw2reg.cfg_set_partition27_high.de),
    .d      (hw2reg.cfg_set_partition27_high.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.cfg_set_partition27_high.q ),

    // to register interface (read)
    .qs     (cfg_set_partition27_high_qs)
  );


  // R[cfg_set_partition28_low]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_cfg_set_partition28_low (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (cfg_set_partition28_low_we),
    .wd     (cfg_set_partition28_low_wd),

    // from internal hardware
    .de     (hw2reg.cfg_set_partition28_low.de),
    .d      (hw2reg.cfg_set_partition28_low.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.cfg_set_partition28_low.q ),

    // to register interface (read)
    .qs     (cfg_set_partition28_low_qs)
  );


  // R[cfg_set_partition28_high]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_cfg_set_partition28_high (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (cfg_set_partition28_high_we),
    .wd     (cfg_set_partition28_high_wd),

    // from internal hardware
    .de     (hw2reg.cfg_set_partition28_high.de),
    .d      (hw2reg.cfg_set_partition28_high.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.cfg_set_partition28_high.q ),

    // to register interface (read)
    .qs     (cfg_set_partition28_high_qs)
  );


  // R[cfg_set_partition29_low]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_cfg_set_partition29_low (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (cfg_set_partition29_low_we),
    .wd     (cfg_set_partition29_low_wd),

    // from internal hardware
    .de     (hw2reg.cfg_set_partition29_low.de),
    .d      (hw2reg.cfg_set_partition29_low.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.cfg_set_partition29_low.q ),

    // to register interface (read)
    .qs     (cfg_set_partition29_low_qs)
  );


  // R[cfg_set_partition29_high]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_cfg_set_partition29_high (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (cfg_set_partition29_high_we),
    .wd     (cfg_set_partition29_high_wd),

    // from internal hardware
    .de     (hw2reg.cfg_set_partition29_high.de),
    .d      (hw2reg.cfg_set_partition29_high.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.cfg_set_partition29_high.q ),

    // to register interface (read)
    .qs     (cfg_set_partition29_high_qs)
  );


  // R[cfg_set_partition30_low]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_cfg_set_partition30_low (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (cfg_set_partition30_low_we),
    .wd     (cfg_set_partition30_low_wd),

    // from internal hardware
    .de     (hw2reg.cfg_set_partition30_low.de),
    .d      (hw2reg.cfg_set_partition30_low.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.cfg_set_partition30_low.q ),

    // to register interface (read)
    .qs     (cfg_set_partition30_low_qs)
  );


  // R[cfg_set_partition30_high]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_cfg_set_partition30_high (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (cfg_set_partition30_high_we),
    .wd     (cfg_set_partition30_high_wd),

    // from internal hardware
    .de     (hw2reg.cfg_set_partition30_high.de),
    .d      (hw2reg.cfg_set_partition30_high.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.cfg_set_partition30_high.q ),

    // to register interface (read)
    .qs     (cfg_set_partition30_high_qs)
  );


  // R[cfg_set_partition31_low]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_cfg_set_partition31_low (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (cfg_set_partition31_low_we),
    .wd     (cfg_set_partition31_low_wd),

    // from internal hardware
    .de     (hw2reg.cfg_set_partition31_low.de),
    .d      (hw2reg.cfg_set_partition31_low.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.cfg_set_partition31_low.q ),

    // to register interface (read)
    .qs     (cfg_set_partition31_low_qs)
  );


  // R[cfg_set_partition31_high]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_cfg_set_partition31_high (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (cfg_set_partition31_high_we),
    .wd     (cfg_set_partition31_high_wd),

    // from internal hardware
    .de     (hw2reg.cfg_set_partition31_high.de),
    .d      (hw2reg.cfg_set_partition31_high.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.cfg_set_partition31_high.q ),

    // to register interface (read)
    .qs     (cfg_set_partition31_high_qs)
  );


  // R[commit_partition_cfg]: V(False)

  prim_subreg #(
    .DW      (1),
    .SWACCESS("W1S"),
    .RESVAL  (1'h0)
  ) u_commit_partition_cfg (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (commit_partition_cfg_we),
    .wd     (commit_partition_cfg_wd),

    // from internal hardware
    .de     (hw2reg.commit_partition_cfg.de),
    .d      (hw2reg.commit_partition_cfg.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.commit_partition_cfg.q ),

    // to register interface (read)
    .qs     (commit_partition_cfg_qs)
  );


  // R[flushed_set0_low]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RO"),
    .RESVAL  (32'h0)
  ) u_flushed_set0_low (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (hw2reg.flushed_set0_low.de),
    .d      (hw2reg.flushed_set0_low.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.flushed_set0_low.q ),

    // to register interface (read)
    .qs     (flushed_set0_low_qs)
  );


  // R[flushed_set0_high]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RO"),
    .RESVAL  (32'h0)
  ) u_flushed_set0_high (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (hw2reg.flushed_set0_high.de),
    .d      (hw2reg.flushed_set0_high.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.flushed_set0_high.q ),

    // to register interface (read)
    .qs     (flushed_set0_high_qs)
  );


  // R[flushed_set1_low]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RO"),
    .RESVAL  (32'h0)
  ) u_flushed_set1_low (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (hw2reg.flushed_set1_low.de),
    .d      (hw2reg.flushed_set1_low.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.flushed_set1_low.q ),

    // to register interface (read)
    .qs     (flushed_set1_low_qs)
  );


  // R[flushed_set1_high]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RO"),
    .RESVAL  (32'h0)
  ) u_flushed_set1_high (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (hw2reg.flushed_set1_high.de),
    .d      (hw2reg.flushed_set1_high.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.flushed_set1_high.q ),

    // to register interface (read)
    .qs     (flushed_set1_high_qs)
  );


  // R[flushed_set2_low]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RO"),
    .RESVAL  (32'h0)
  ) u_flushed_set2_low (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (hw2reg.flushed_set2_low.de),
    .d      (hw2reg.flushed_set2_low.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.flushed_set2_low.q ),

    // to register interface (read)
    .qs     (flushed_set2_low_qs)
  );


  // R[flushed_set2_high]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RO"),
    .RESVAL  (32'h0)
  ) u_flushed_set2_high (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (hw2reg.flushed_set2_high.de),
    .d      (hw2reg.flushed_set2_high.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.flushed_set2_high.q ),

    // to register interface (read)
    .qs     (flushed_set2_high_qs)
  );


  // R[flushed_set3_low]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RO"),
    .RESVAL  (32'h0)
  ) u_flushed_set3_low (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (hw2reg.flushed_set3_low.de),
    .d      (hw2reg.flushed_set3_low.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.flushed_set3_low.q ),

    // to register interface (read)
    .qs     (flushed_set3_low_qs)
  );


  // R[flushed_set3_high]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RO"),
    .RESVAL  (32'h0)
  ) u_flushed_set3_high (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (hw2reg.flushed_set3_high.de),
    .d      (hw2reg.flushed_set3_high.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.flushed_set3_high.q ),

    // to register interface (read)
    .qs     (flushed_set3_high_qs)
  );




  logic [92:0] addr_hit;
  always_comb begin
    addr_hit = '0;
    addr_hit[ 0] = (reg_addr == AXI_LLC_CFG_SPM_LOW_OFFSET);
    addr_hit[ 1] = (reg_addr == AXI_LLC_CFG_SPM_HIGH_OFFSET);
    addr_hit[ 2] = (reg_addr == AXI_LLC_CFG_FLUSH_LOW_OFFSET);
    addr_hit[ 3] = (reg_addr == AXI_LLC_CFG_FLUSH_HIGH_OFFSET);
    addr_hit[ 4] = (reg_addr == AXI_LLC_COMMIT_CFG_OFFSET);
    addr_hit[ 5] = (reg_addr == AXI_LLC_FLUSHED_LOW_OFFSET);
    addr_hit[ 6] = (reg_addr == AXI_LLC_FLUSHED_HIGH_OFFSET);
    addr_hit[ 7] = (reg_addr == AXI_LLC_BIST_OUT_LOW_OFFSET);
    addr_hit[ 8] = (reg_addr == AXI_LLC_BIST_OUT_HIGH_OFFSET);
    addr_hit[ 9] = (reg_addr == AXI_LLC_SET_ASSO_LOW_OFFSET);
    addr_hit[10] = (reg_addr == AXI_LLC_SET_ASSO_HIGH_OFFSET);
    addr_hit[11] = (reg_addr == AXI_LLC_NUM_LINES_LOW_OFFSET);
    addr_hit[12] = (reg_addr == AXI_LLC_NUM_LINES_HIGH_OFFSET);
    addr_hit[13] = (reg_addr == AXI_LLC_NUM_BLOCKS_LOW_OFFSET);
    addr_hit[14] = (reg_addr == AXI_LLC_NUM_BLOCKS_HIGH_OFFSET);
    addr_hit[15] = (reg_addr == AXI_LLC_VERSION_LOW_OFFSET);
    addr_hit[16] = (reg_addr == AXI_LLC_VERSION_HIGH_OFFSET);
    addr_hit[17] = (reg_addr == AXI_LLC_BIST_STATUS_OFFSET);
    addr_hit[18] = (reg_addr == AXI_LLC_CFG_FLUSH_THREAD_LOW_OFFSET);
    addr_hit[19] = (reg_addr == AXI_LLC_CFG_FLUSH_THREAD_HIGH_OFFSET);
    addr_hit[20] = (reg_addr == AXI_LLC_CFG_SET_PARTITION0_LOW_OFFSET);
    addr_hit[21] = (reg_addr == AXI_LLC_CFG_SET_PARTITION0_HIGH_OFFSET);
    addr_hit[22] = (reg_addr == AXI_LLC_CFG_SET_PARTITION1_LOW_OFFSET);
    addr_hit[23] = (reg_addr == AXI_LLC_CFG_SET_PARTITION1_HIGH_OFFSET);
    addr_hit[24] = (reg_addr == AXI_LLC_CFG_SET_PARTITION2_LOW_OFFSET);
    addr_hit[25] = (reg_addr == AXI_LLC_CFG_SET_PARTITION2_HIGH_OFFSET);
    addr_hit[26] = (reg_addr == AXI_LLC_CFG_SET_PARTITION3_LOW_OFFSET);
    addr_hit[27] = (reg_addr == AXI_LLC_CFG_SET_PARTITION3_HIGH_OFFSET);
    addr_hit[28] = (reg_addr == AXI_LLC_CFG_SET_PARTITION4_LOW_OFFSET);
    addr_hit[29] = (reg_addr == AXI_LLC_CFG_SET_PARTITION4_HIGH_OFFSET);
    addr_hit[30] = (reg_addr == AXI_LLC_CFG_SET_PARTITION5_LOW_OFFSET);
    addr_hit[31] = (reg_addr == AXI_LLC_CFG_SET_PARTITION5_HIGH_OFFSET);
    addr_hit[32] = (reg_addr == AXI_LLC_CFG_SET_PARTITION6_LOW_OFFSET);
    addr_hit[33] = (reg_addr == AXI_LLC_CFG_SET_PARTITION6_HIGH_OFFSET);
    addr_hit[34] = (reg_addr == AXI_LLC_CFG_SET_PARTITION7_LOW_OFFSET);
    addr_hit[35] = (reg_addr == AXI_LLC_CFG_SET_PARTITION7_HIGH_OFFSET);
    addr_hit[36] = (reg_addr == AXI_LLC_CFG_SET_PARTITION8_LOW_OFFSET);
    addr_hit[37] = (reg_addr == AXI_LLC_CFG_SET_PARTITION8_HIGH_OFFSET);
    addr_hit[38] = (reg_addr == AXI_LLC_CFG_SET_PARTITION9_LOW_OFFSET);
    addr_hit[39] = (reg_addr == AXI_LLC_CFG_SET_PARTITION9_HIGH_OFFSET);
    addr_hit[40] = (reg_addr == AXI_LLC_CFG_SET_PARTITION10_LOW_OFFSET);
    addr_hit[41] = (reg_addr == AXI_LLC_CFG_SET_PARTITION10_HIGH_OFFSET);
    addr_hit[42] = (reg_addr == AXI_LLC_CFG_SET_PARTITION11_LOW_OFFSET);
    addr_hit[43] = (reg_addr == AXI_LLC_CFG_SET_PARTITION11_HIGH_OFFSET);
    addr_hit[44] = (reg_addr == AXI_LLC_CFG_SET_PARTITION12_LOW_OFFSET);
    addr_hit[45] = (reg_addr == AXI_LLC_CFG_SET_PARTITION12_HIGH_OFFSET);
    addr_hit[46] = (reg_addr == AXI_LLC_CFG_SET_PARTITION13_LOW_OFFSET);
    addr_hit[47] = (reg_addr == AXI_LLC_CFG_SET_PARTITION13_HIGH_OFFSET);
    addr_hit[48] = (reg_addr == AXI_LLC_CFG_SET_PARTITION14_LOW_OFFSET);
    addr_hit[49] = (reg_addr == AXI_LLC_CFG_SET_PARTITION14_HIGH_OFFSET);
    addr_hit[50] = (reg_addr == AXI_LLC_CFG_SET_PARTITION15_LOW_OFFSET);
    addr_hit[51] = (reg_addr == AXI_LLC_CFG_SET_PARTITION15_HIGH_OFFSET);
    addr_hit[52] = (reg_addr == AXI_LLC_CFG_SET_PARTITION16_LOW_OFFSET);
    addr_hit[53] = (reg_addr == AXI_LLC_CFG_SET_PARTITION16_HIGH_OFFSET);
    addr_hit[54] = (reg_addr == AXI_LLC_CFG_SET_PARTITION17_LOW_OFFSET);
    addr_hit[55] = (reg_addr == AXI_LLC_CFG_SET_PARTITION17_HIGH_OFFSET);
    addr_hit[56] = (reg_addr == AXI_LLC_CFG_SET_PARTITION18_LOW_OFFSET);
    addr_hit[57] = (reg_addr == AXI_LLC_CFG_SET_PARTITION18_HIGH_OFFSET);
    addr_hit[58] = (reg_addr == AXI_LLC_CFG_SET_PARTITION19_LOW_OFFSET);
    addr_hit[59] = (reg_addr == AXI_LLC_CFG_SET_PARTITION19_HIGH_OFFSET);
    addr_hit[60] = (reg_addr == AXI_LLC_CFG_SET_PARTITION20_LOW_OFFSET);
    addr_hit[61] = (reg_addr == AXI_LLC_CFG_SET_PARTITION20_HIGH_OFFSET);
    addr_hit[62] = (reg_addr == AXI_LLC_CFG_SET_PARTITION21_LOW_OFFSET);
    addr_hit[63] = (reg_addr == AXI_LLC_CFG_SET_PARTITION21_HIGH_OFFSET);
    addr_hit[64] = (reg_addr == AXI_LLC_CFG_SET_PARTITION22_LOW_OFFSET);
    addr_hit[65] = (reg_addr == AXI_LLC_CFG_SET_PARTITION22_HIGH_OFFSET);
    addr_hit[66] = (reg_addr == AXI_LLC_CFG_SET_PARTITION23_LOW_OFFSET);
    addr_hit[67] = (reg_addr == AXI_LLC_CFG_SET_PARTITION23_HIGH_OFFSET);
    addr_hit[68] = (reg_addr == AXI_LLC_CFG_SET_PARTITION24_LOW_OFFSET);
    addr_hit[69] = (reg_addr == AXI_LLC_CFG_SET_PARTITION24_HIGH_OFFSET);
    addr_hit[70] = (reg_addr == AXI_LLC_CFG_SET_PARTITION25_LOW_OFFSET);
    addr_hit[71] = (reg_addr == AXI_LLC_CFG_SET_PARTITION25_HIGH_OFFSET);
    addr_hit[72] = (reg_addr == AXI_LLC_CFG_SET_PARTITION26_LOW_OFFSET);
    addr_hit[73] = (reg_addr == AXI_LLC_CFG_SET_PARTITION26_HIGH_OFFSET);
    addr_hit[74] = (reg_addr == AXI_LLC_CFG_SET_PARTITION27_LOW_OFFSET);
    addr_hit[75] = (reg_addr == AXI_LLC_CFG_SET_PARTITION27_HIGH_OFFSET);
    addr_hit[76] = (reg_addr == AXI_LLC_CFG_SET_PARTITION28_LOW_OFFSET);
    addr_hit[77] = (reg_addr == AXI_LLC_CFG_SET_PARTITION28_HIGH_OFFSET);
    addr_hit[78] = (reg_addr == AXI_LLC_CFG_SET_PARTITION29_LOW_OFFSET);
    addr_hit[79] = (reg_addr == AXI_LLC_CFG_SET_PARTITION29_HIGH_OFFSET);
    addr_hit[80] = (reg_addr == AXI_LLC_CFG_SET_PARTITION30_LOW_OFFSET);
    addr_hit[81] = (reg_addr == AXI_LLC_CFG_SET_PARTITION30_HIGH_OFFSET);
    addr_hit[82] = (reg_addr == AXI_LLC_CFG_SET_PARTITION31_LOW_OFFSET);
    addr_hit[83] = (reg_addr == AXI_LLC_CFG_SET_PARTITION31_HIGH_OFFSET);
    addr_hit[84] = (reg_addr == AXI_LLC_COMMIT_PARTITION_CFG_OFFSET);
    addr_hit[85] = (reg_addr == AXI_LLC_FLUSHED_SET0_LOW_OFFSET);
    addr_hit[86] = (reg_addr == AXI_LLC_FLUSHED_SET0_HIGH_OFFSET);
    addr_hit[87] = (reg_addr == AXI_LLC_FLUSHED_SET1_LOW_OFFSET);
    addr_hit[88] = (reg_addr == AXI_LLC_FLUSHED_SET1_HIGH_OFFSET);
    addr_hit[89] = (reg_addr == AXI_LLC_FLUSHED_SET2_LOW_OFFSET);
    addr_hit[90] = (reg_addr == AXI_LLC_FLUSHED_SET2_HIGH_OFFSET);
    addr_hit[91] = (reg_addr == AXI_LLC_FLUSHED_SET3_LOW_OFFSET);
    addr_hit[92] = (reg_addr == AXI_LLC_FLUSHED_SET3_HIGH_OFFSET);
  end

  assign addrmiss = (reg_re || reg_we) ? ~|addr_hit : 1'b0 ;

  // Check sub-word write is permitted
  always_comb begin
    wr_err = (reg_we &
              ((addr_hit[ 0] & (|(AXI_LLC_PERMIT[ 0] & ~reg_be))) |
               (addr_hit[ 1] & (|(AXI_LLC_PERMIT[ 1] & ~reg_be))) |
               (addr_hit[ 2] & (|(AXI_LLC_PERMIT[ 2] & ~reg_be))) |
               (addr_hit[ 3] & (|(AXI_LLC_PERMIT[ 3] & ~reg_be))) |
               (addr_hit[ 4] & (|(AXI_LLC_PERMIT[ 4] & ~reg_be))) |
               (addr_hit[ 5] & (|(AXI_LLC_PERMIT[ 5] & ~reg_be))) |
               (addr_hit[ 6] & (|(AXI_LLC_PERMIT[ 6] & ~reg_be))) |
               (addr_hit[ 7] & (|(AXI_LLC_PERMIT[ 7] & ~reg_be))) |
               (addr_hit[ 8] & (|(AXI_LLC_PERMIT[ 8] & ~reg_be))) |
               (addr_hit[ 9] & (|(AXI_LLC_PERMIT[ 9] & ~reg_be))) |
               (addr_hit[10] & (|(AXI_LLC_PERMIT[10] & ~reg_be))) |
               (addr_hit[11] & (|(AXI_LLC_PERMIT[11] & ~reg_be))) |
               (addr_hit[12] & (|(AXI_LLC_PERMIT[12] & ~reg_be))) |
               (addr_hit[13] & (|(AXI_LLC_PERMIT[13] & ~reg_be))) |
               (addr_hit[14] & (|(AXI_LLC_PERMIT[14] & ~reg_be))) |
               (addr_hit[15] & (|(AXI_LLC_PERMIT[15] & ~reg_be))) |
               (addr_hit[16] & (|(AXI_LLC_PERMIT[16] & ~reg_be))) |
               (addr_hit[17] & (|(AXI_LLC_PERMIT[17] & ~reg_be))) |
               (addr_hit[18] & (|(AXI_LLC_PERMIT[18] & ~reg_be))) |
               (addr_hit[19] & (|(AXI_LLC_PERMIT[19] & ~reg_be))) |
               (addr_hit[20] & (|(AXI_LLC_PERMIT[20] & ~reg_be))) |
               (addr_hit[21] & (|(AXI_LLC_PERMIT[21] & ~reg_be))) |
               (addr_hit[22] & (|(AXI_LLC_PERMIT[22] & ~reg_be))) |
               (addr_hit[23] & (|(AXI_LLC_PERMIT[23] & ~reg_be))) |
               (addr_hit[24] & (|(AXI_LLC_PERMIT[24] & ~reg_be))) |
               (addr_hit[25] & (|(AXI_LLC_PERMIT[25] & ~reg_be))) |
               (addr_hit[26] & (|(AXI_LLC_PERMIT[26] & ~reg_be))) |
               (addr_hit[27] & (|(AXI_LLC_PERMIT[27] & ~reg_be))) |
               (addr_hit[28] & (|(AXI_LLC_PERMIT[28] & ~reg_be))) |
               (addr_hit[29] & (|(AXI_LLC_PERMIT[29] & ~reg_be))) |
               (addr_hit[30] & (|(AXI_LLC_PERMIT[30] & ~reg_be))) |
               (addr_hit[31] & (|(AXI_LLC_PERMIT[31] & ~reg_be))) |
               (addr_hit[32] & (|(AXI_LLC_PERMIT[32] & ~reg_be))) |
               (addr_hit[33] & (|(AXI_LLC_PERMIT[33] & ~reg_be))) |
               (addr_hit[34] & (|(AXI_LLC_PERMIT[34] & ~reg_be))) |
               (addr_hit[35] & (|(AXI_LLC_PERMIT[35] & ~reg_be))) |
               (addr_hit[36] & (|(AXI_LLC_PERMIT[36] & ~reg_be))) |
               (addr_hit[37] & (|(AXI_LLC_PERMIT[37] & ~reg_be))) |
               (addr_hit[38] & (|(AXI_LLC_PERMIT[38] & ~reg_be))) |
               (addr_hit[39] & (|(AXI_LLC_PERMIT[39] & ~reg_be))) |
               (addr_hit[40] & (|(AXI_LLC_PERMIT[40] & ~reg_be))) |
               (addr_hit[41] & (|(AXI_LLC_PERMIT[41] & ~reg_be))) |
               (addr_hit[42] & (|(AXI_LLC_PERMIT[42] & ~reg_be))) |
               (addr_hit[43] & (|(AXI_LLC_PERMIT[43] & ~reg_be))) |
               (addr_hit[44] & (|(AXI_LLC_PERMIT[44] & ~reg_be))) |
               (addr_hit[45] & (|(AXI_LLC_PERMIT[45] & ~reg_be))) |
               (addr_hit[46] & (|(AXI_LLC_PERMIT[46] & ~reg_be))) |
               (addr_hit[47] & (|(AXI_LLC_PERMIT[47] & ~reg_be))) |
               (addr_hit[48] & (|(AXI_LLC_PERMIT[48] & ~reg_be))) |
               (addr_hit[49] & (|(AXI_LLC_PERMIT[49] & ~reg_be))) |
               (addr_hit[50] & (|(AXI_LLC_PERMIT[50] & ~reg_be))) |
               (addr_hit[51] & (|(AXI_LLC_PERMIT[51] & ~reg_be))) |
               (addr_hit[52] & (|(AXI_LLC_PERMIT[52] & ~reg_be))) |
               (addr_hit[53] & (|(AXI_LLC_PERMIT[53] & ~reg_be))) |
               (addr_hit[54] & (|(AXI_LLC_PERMIT[54] & ~reg_be))) |
               (addr_hit[55] & (|(AXI_LLC_PERMIT[55] & ~reg_be))) |
               (addr_hit[56] & (|(AXI_LLC_PERMIT[56] & ~reg_be))) |
               (addr_hit[57] & (|(AXI_LLC_PERMIT[57] & ~reg_be))) |
               (addr_hit[58] & (|(AXI_LLC_PERMIT[58] & ~reg_be))) |
               (addr_hit[59] & (|(AXI_LLC_PERMIT[59] & ~reg_be))) |
               (addr_hit[60] & (|(AXI_LLC_PERMIT[60] & ~reg_be))) |
               (addr_hit[61] & (|(AXI_LLC_PERMIT[61] & ~reg_be))) |
               (addr_hit[62] & (|(AXI_LLC_PERMIT[62] & ~reg_be))) |
               (addr_hit[63] & (|(AXI_LLC_PERMIT[63] & ~reg_be))) |
               (addr_hit[64] & (|(AXI_LLC_PERMIT[64] & ~reg_be))) |
               (addr_hit[65] & (|(AXI_LLC_PERMIT[65] & ~reg_be))) |
               (addr_hit[66] & (|(AXI_LLC_PERMIT[66] & ~reg_be))) |
               (addr_hit[67] & (|(AXI_LLC_PERMIT[67] & ~reg_be))) |
               (addr_hit[68] & (|(AXI_LLC_PERMIT[68] & ~reg_be))) |
               (addr_hit[69] & (|(AXI_LLC_PERMIT[69] & ~reg_be))) |
               (addr_hit[70] & (|(AXI_LLC_PERMIT[70] & ~reg_be))) |
               (addr_hit[71] & (|(AXI_LLC_PERMIT[71] & ~reg_be))) |
               (addr_hit[72] & (|(AXI_LLC_PERMIT[72] & ~reg_be))) |
               (addr_hit[73] & (|(AXI_LLC_PERMIT[73] & ~reg_be))) |
               (addr_hit[74] & (|(AXI_LLC_PERMIT[74] & ~reg_be))) |
               (addr_hit[75] & (|(AXI_LLC_PERMIT[75] & ~reg_be))) |
               (addr_hit[76] & (|(AXI_LLC_PERMIT[76] & ~reg_be))) |
               (addr_hit[77] & (|(AXI_LLC_PERMIT[77] & ~reg_be))) |
               (addr_hit[78] & (|(AXI_LLC_PERMIT[78] & ~reg_be))) |
               (addr_hit[79] & (|(AXI_LLC_PERMIT[79] & ~reg_be))) |
               (addr_hit[80] & (|(AXI_LLC_PERMIT[80] & ~reg_be))) |
               (addr_hit[81] & (|(AXI_LLC_PERMIT[81] & ~reg_be))) |
               (addr_hit[82] & (|(AXI_LLC_PERMIT[82] & ~reg_be))) |
               (addr_hit[83] & (|(AXI_LLC_PERMIT[83] & ~reg_be))) |
               (addr_hit[84] & (|(AXI_LLC_PERMIT[84] & ~reg_be))) |
               (addr_hit[85] & (|(AXI_LLC_PERMIT[85] & ~reg_be))) |
               (addr_hit[86] & (|(AXI_LLC_PERMIT[86] & ~reg_be))) |
               (addr_hit[87] & (|(AXI_LLC_PERMIT[87] & ~reg_be))) |
               (addr_hit[88] & (|(AXI_LLC_PERMIT[88] & ~reg_be))) |
               (addr_hit[89] & (|(AXI_LLC_PERMIT[89] & ~reg_be))) |
               (addr_hit[90] & (|(AXI_LLC_PERMIT[90] & ~reg_be))) |
               (addr_hit[91] & (|(AXI_LLC_PERMIT[91] & ~reg_be))) |
               (addr_hit[92] & (|(AXI_LLC_PERMIT[92] & ~reg_be)))));
  end

  assign cfg_spm_low_we = addr_hit[0] & reg_we & !reg_error;
  assign cfg_spm_low_wd = reg_wdata[31:0];

  assign cfg_spm_high_we = addr_hit[1] & reg_we & !reg_error;
  assign cfg_spm_high_wd = reg_wdata[31:0];

  assign cfg_flush_low_we = addr_hit[2] & reg_we & !reg_error;
  assign cfg_flush_low_wd = reg_wdata[31:0];

  assign cfg_flush_high_we = addr_hit[3] & reg_we & !reg_error;
  assign cfg_flush_high_wd = reg_wdata[31:0];

  assign commit_cfg_we = addr_hit[4] & reg_we & !reg_error;
  assign commit_cfg_wd = reg_wdata[0];

  assign cfg_flush_thread_low_we = addr_hit[18] & reg_we & !reg_error;
  assign cfg_flush_thread_low_wd = reg_wdata[31:0];

  assign cfg_flush_thread_high_we = addr_hit[19] & reg_we & !reg_error;
  assign cfg_flush_thread_high_wd = reg_wdata[31:0];

  assign cfg_set_partition0_low_we = addr_hit[20] & reg_we & !reg_error;
  assign cfg_set_partition0_low_wd = reg_wdata[31:0];

  assign cfg_set_partition0_high_we = addr_hit[21] & reg_we & !reg_error;
  assign cfg_set_partition0_high_wd = reg_wdata[31:0];

  assign cfg_set_partition1_low_we = addr_hit[22] & reg_we & !reg_error;
  assign cfg_set_partition1_low_wd = reg_wdata[31:0];

  assign cfg_set_partition1_high_we = addr_hit[23] & reg_we & !reg_error;
  assign cfg_set_partition1_high_wd = reg_wdata[31:0];

  assign cfg_set_partition2_low_we = addr_hit[24] & reg_we & !reg_error;
  assign cfg_set_partition2_low_wd = reg_wdata[31:0];

  assign cfg_set_partition2_high_we = addr_hit[25] & reg_we & !reg_error;
  assign cfg_set_partition2_high_wd = reg_wdata[31:0];

  assign cfg_set_partition3_low_we = addr_hit[26] & reg_we & !reg_error;
  assign cfg_set_partition3_low_wd = reg_wdata[31:0];

  assign cfg_set_partition3_high_we = addr_hit[27] & reg_we & !reg_error;
  assign cfg_set_partition3_high_wd = reg_wdata[31:0];

  assign cfg_set_partition4_low_we = addr_hit[28] & reg_we & !reg_error;
  assign cfg_set_partition4_low_wd = reg_wdata[31:0];

  assign cfg_set_partition4_high_we = addr_hit[29] & reg_we & !reg_error;
  assign cfg_set_partition4_high_wd = reg_wdata[31:0];

  assign cfg_set_partition5_low_we = addr_hit[30] & reg_we & !reg_error;
  assign cfg_set_partition5_low_wd = reg_wdata[31:0];

  assign cfg_set_partition5_high_we = addr_hit[31] & reg_we & !reg_error;
  assign cfg_set_partition5_high_wd = reg_wdata[31:0];

  assign cfg_set_partition6_low_we = addr_hit[32] & reg_we & !reg_error;
  assign cfg_set_partition6_low_wd = reg_wdata[31:0];

  assign cfg_set_partition6_high_we = addr_hit[33] & reg_we & !reg_error;
  assign cfg_set_partition6_high_wd = reg_wdata[31:0];

  assign cfg_set_partition7_low_we = addr_hit[34] & reg_we & !reg_error;
  assign cfg_set_partition7_low_wd = reg_wdata[31:0];

  assign cfg_set_partition7_high_we = addr_hit[35] & reg_we & !reg_error;
  assign cfg_set_partition7_high_wd = reg_wdata[31:0];

  assign cfg_set_partition8_low_we = addr_hit[36] & reg_we & !reg_error;
  assign cfg_set_partition8_low_wd = reg_wdata[31:0];

  assign cfg_set_partition8_high_we = addr_hit[37] & reg_we & !reg_error;
  assign cfg_set_partition8_high_wd = reg_wdata[31:0];

  assign cfg_set_partition9_low_we = addr_hit[38] & reg_we & !reg_error;
  assign cfg_set_partition9_low_wd = reg_wdata[31:0];

  assign cfg_set_partition9_high_we = addr_hit[39] & reg_we & !reg_error;
  assign cfg_set_partition9_high_wd = reg_wdata[31:0];

  assign cfg_set_partition10_low_we = addr_hit[40] & reg_we & !reg_error;
  assign cfg_set_partition10_low_wd = reg_wdata[31:0];

  assign cfg_set_partition10_high_we = addr_hit[41] & reg_we & !reg_error;
  assign cfg_set_partition10_high_wd = reg_wdata[31:0];

  assign cfg_set_partition11_low_we = addr_hit[42] & reg_we & !reg_error;
  assign cfg_set_partition11_low_wd = reg_wdata[31:0];

  assign cfg_set_partition11_high_we = addr_hit[43] & reg_we & !reg_error;
  assign cfg_set_partition11_high_wd = reg_wdata[31:0];

  assign cfg_set_partition12_low_we = addr_hit[44] & reg_we & !reg_error;
  assign cfg_set_partition12_low_wd = reg_wdata[31:0];

  assign cfg_set_partition12_high_we = addr_hit[45] & reg_we & !reg_error;
  assign cfg_set_partition12_high_wd = reg_wdata[31:0];

  assign cfg_set_partition13_low_we = addr_hit[46] & reg_we & !reg_error;
  assign cfg_set_partition13_low_wd = reg_wdata[31:0];

  assign cfg_set_partition13_high_we = addr_hit[47] & reg_we & !reg_error;
  assign cfg_set_partition13_high_wd = reg_wdata[31:0];

  assign cfg_set_partition14_low_we = addr_hit[48] & reg_we & !reg_error;
  assign cfg_set_partition14_low_wd = reg_wdata[31:0];

  assign cfg_set_partition14_high_we = addr_hit[49] & reg_we & !reg_error;
  assign cfg_set_partition14_high_wd = reg_wdata[31:0];

  assign cfg_set_partition15_low_we = addr_hit[50] & reg_we & !reg_error;
  assign cfg_set_partition15_low_wd = reg_wdata[31:0];

  assign cfg_set_partition15_high_we = addr_hit[51] & reg_we & !reg_error;
  assign cfg_set_partition15_high_wd = reg_wdata[31:0];

  assign cfg_set_partition16_low_we = addr_hit[52] & reg_we & !reg_error;
  assign cfg_set_partition16_low_wd = reg_wdata[31:0];

  assign cfg_set_partition16_high_we = addr_hit[53] & reg_we & !reg_error;
  assign cfg_set_partition16_high_wd = reg_wdata[31:0];

  assign cfg_set_partition17_low_we = addr_hit[54] & reg_we & !reg_error;
  assign cfg_set_partition17_low_wd = reg_wdata[31:0];

  assign cfg_set_partition17_high_we = addr_hit[55] & reg_we & !reg_error;
  assign cfg_set_partition17_high_wd = reg_wdata[31:0];

  assign cfg_set_partition18_low_we = addr_hit[56] & reg_we & !reg_error;
  assign cfg_set_partition18_low_wd = reg_wdata[31:0];

  assign cfg_set_partition18_high_we = addr_hit[57] & reg_we & !reg_error;
  assign cfg_set_partition18_high_wd = reg_wdata[31:0];

  assign cfg_set_partition19_low_we = addr_hit[58] & reg_we & !reg_error;
  assign cfg_set_partition19_low_wd = reg_wdata[31:0];

  assign cfg_set_partition19_high_we = addr_hit[59] & reg_we & !reg_error;
  assign cfg_set_partition19_high_wd = reg_wdata[31:0];

  assign cfg_set_partition20_low_we = addr_hit[60] & reg_we & !reg_error;
  assign cfg_set_partition20_low_wd = reg_wdata[31:0];

  assign cfg_set_partition20_high_we = addr_hit[61] & reg_we & !reg_error;
  assign cfg_set_partition20_high_wd = reg_wdata[31:0];

  assign cfg_set_partition21_low_we = addr_hit[62] & reg_we & !reg_error;
  assign cfg_set_partition21_low_wd = reg_wdata[31:0];

  assign cfg_set_partition21_high_we = addr_hit[63] & reg_we & !reg_error;
  assign cfg_set_partition21_high_wd = reg_wdata[31:0];

  assign cfg_set_partition22_low_we = addr_hit[64] & reg_we & !reg_error;
  assign cfg_set_partition22_low_wd = reg_wdata[31:0];

  assign cfg_set_partition22_high_we = addr_hit[65] & reg_we & !reg_error;
  assign cfg_set_partition22_high_wd = reg_wdata[31:0];

  assign cfg_set_partition23_low_we = addr_hit[66] & reg_we & !reg_error;
  assign cfg_set_partition23_low_wd = reg_wdata[31:0];

  assign cfg_set_partition23_high_we = addr_hit[67] & reg_we & !reg_error;
  assign cfg_set_partition23_high_wd = reg_wdata[31:0];

  assign cfg_set_partition24_low_we = addr_hit[68] & reg_we & !reg_error;
  assign cfg_set_partition24_low_wd = reg_wdata[31:0];

  assign cfg_set_partition24_high_we = addr_hit[69] & reg_we & !reg_error;
  assign cfg_set_partition24_high_wd = reg_wdata[31:0];

  assign cfg_set_partition25_low_we = addr_hit[70] & reg_we & !reg_error;
  assign cfg_set_partition25_low_wd = reg_wdata[31:0];

  assign cfg_set_partition25_high_we = addr_hit[71] & reg_we & !reg_error;
  assign cfg_set_partition25_high_wd = reg_wdata[31:0];

  assign cfg_set_partition26_low_we = addr_hit[72] & reg_we & !reg_error;
  assign cfg_set_partition26_low_wd = reg_wdata[31:0];

  assign cfg_set_partition26_high_we = addr_hit[73] & reg_we & !reg_error;
  assign cfg_set_partition26_high_wd = reg_wdata[31:0];

  assign cfg_set_partition27_low_we = addr_hit[74] & reg_we & !reg_error;
  assign cfg_set_partition27_low_wd = reg_wdata[31:0];

  assign cfg_set_partition27_high_we = addr_hit[75] & reg_we & !reg_error;
  assign cfg_set_partition27_high_wd = reg_wdata[31:0];

  assign cfg_set_partition28_low_we = addr_hit[76] & reg_we & !reg_error;
  assign cfg_set_partition28_low_wd = reg_wdata[31:0];

  assign cfg_set_partition28_high_we = addr_hit[77] & reg_we & !reg_error;
  assign cfg_set_partition28_high_wd = reg_wdata[31:0];

  assign cfg_set_partition29_low_we = addr_hit[78] & reg_we & !reg_error;
  assign cfg_set_partition29_low_wd = reg_wdata[31:0];

  assign cfg_set_partition29_high_we = addr_hit[79] & reg_we & !reg_error;
  assign cfg_set_partition29_high_wd = reg_wdata[31:0];

  assign cfg_set_partition30_low_we = addr_hit[80] & reg_we & !reg_error;
  assign cfg_set_partition30_low_wd = reg_wdata[31:0];

  assign cfg_set_partition30_high_we = addr_hit[81] & reg_we & !reg_error;
  assign cfg_set_partition30_high_wd = reg_wdata[31:0];

  assign cfg_set_partition31_low_we = addr_hit[82] & reg_we & !reg_error;
  assign cfg_set_partition31_low_wd = reg_wdata[31:0];

  assign cfg_set_partition31_high_we = addr_hit[83] & reg_we & !reg_error;
  assign cfg_set_partition31_high_wd = reg_wdata[31:0];

  assign commit_partition_cfg_we = addr_hit[84] & reg_we & !reg_error;
  assign commit_partition_cfg_wd = reg_wdata[0];

  // Read data return
  always_comb begin
    reg_rdata_next = '0;
    unique case (1'b1)
      addr_hit[0]: begin
        reg_rdata_next[31:0] = cfg_spm_low_qs;
      end

      addr_hit[1]: begin
        reg_rdata_next[31:0] = cfg_spm_high_qs;
      end

      addr_hit[2]: begin
        reg_rdata_next[31:0] = cfg_flush_low_qs;
      end

      addr_hit[3]: begin
        reg_rdata_next[31:0] = cfg_flush_high_qs;
      end

      addr_hit[4]: begin
        reg_rdata_next[0] = commit_cfg_qs;
      end

      addr_hit[5]: begin
        reg_rdata_next[31:0] = flushed_low_qs;
      end

      addr_hit[6]: begin
        reg_rdata_next[31:0] = flushed_high_qs;
      end

      addr_hit[7]: begin
        reg_rdata_next[31:0] = bist_out_low_qs;
      end

      addr_hit[8]: begin
        reg_rdata_next[31:0] = bist_out_high_qs;
      end

      addr_hit[9]: begin
        reg_rdata_next[31:0] = set_asso_low_qs;
      end

      addr_hit[10]: begin
        reg_rdata_next[31:0] = set_asso_high_qs;
      end

      addr_hit[11]: begin
        reg_rdata_next[31:0] = num_lines_low_qs;
      end

      addr_hit[12]: begin
        reg_rdata_next[31:0] = num_lines_high_qs;
      end

      addr_hit[13]: begin
        reg_rdata_next[31:0] = num_blocks_low_qs;
      end

      addr_hit[14]: begin
        reg_rdata_next[31:0] = num_blocks_high_qs;
      end

      addr_hit[15]: begin
        reg_rdata_next[31:0] = version_low_qs;
      end

      addr_hit[16]: begin
        reg_rdata_next[31:0] = version_high_qs;
      end

      addr_hit[17]: begin
        reg_rdata_next[0] = bist_status_qs;
      end

      addr_hit[18]: begin
        reg_rdata_next[31:0] = cfg_flush_thread_low_qs;
      end

      addr_hit[19]: begin
        reg_rdata_next[31:0] = cfg_flush_thread_high_qs;
      end

      addr_hit[20]: begin
        reg_rdata_next[31:0] = cfg_set_partition0_low_qs;
      end

      addr_hit[21]: begin
        reg_rdata_next[31:0] = cfg_set_partition0_high_qs;
      end

      addr_hit[22]: begin
        reg_rdata_next[31:0] = cfg_set_partition1_low_qs;
      end

      addr_hit[23]: begin
        reg_rdata_next[31:0] = cfg_set_partition1_high_qs;
      end

      addr_hit[24]: begin
        reg_rdata_next[31:0] = cfg_set_partition2_low_qs;
      end

      addr_hit[25]: begin
        reg_rdata_next[31:0] = cfg_set_partition2_high_qs;
      end

      addr_hit[26]: begin
        reg_rdata_next[31:0] = cfg_set_partition3_low_qs;
      end

      addr_hit[27]: begin
        reg_rdata_next[31:0] = cfg_set_partition3_high_qs;
      end

      addr_hit[28]: begin
        reg_rdata_next[31:0] = cfg_set_partition4_low_qs;
      end

      addr_hit[29]: begin
        reg_rdata_next[31:0] = cfg_set_partition4_high_qs;
      end

      addr_hit[30]: begin
        reg_rdata_next[31:0] = cfg_set_partition5_low_qs;
      end

      addr_hit[31]: begin
        reg_rdata_next[31:0] = cfg_set_partition5_high_qs;
      end

      addr_hit[32]: begin
        reg_rdata_next[31:0] = cfg_set_partition6_low_qs;
      end

      addr_hit[33]: begin
        reg_rdata_next[31:0] = cfg_set_partition6_high_qs;
      end

      addr_hit[34]: begin
        reg_rdata_next[31:0] = cfg_set_partition7_low_qs;
      end

      addr_hit[35]: begin
        reg_rdata_next[31:0] = cfg_set_partition7_high_qs;
      end

      addr_hit[36]: begin
        reg_rdata_next[31:0] = cfg_set_partition8_low_qs;
      end

      addr_hit[37]: begin
        reg_rdata_next[31:0] = cfg_set_partition8_high_qs;
      end

      addr_hit[38]: begin
        reg_rdata_next[31:0] = cfg_set_partition9_low_qs;
      end

      addr_hit[39]: begin
        reg_rdata_next[31:0] = cfg_set_partition9_high_qs;
      end

      addr_hit[40]: begin
        reg_rdata_next[31:0] = cfg_set_partition10_low_qs;
      end

      addr_hit[41]: begin
        reg_rdata_next[31:0] = cfg_set_partition10_high_qs;
      end

      addr_hit[42]: begin
        reg_rdata_next[31:0] = cfg_set_partition11_low_qs;
      end

      addr_hit[43]: begin
        reg_rdata_next[31:0] = cfg_set_partition11_high_qs;
      end

      addr_hit[44]: begin
        reg_rdata_next[31:0] = cfg_set_partition12_low_qs;
      end

      addr_hit[45]: begin
        reg_rdata_next[31:0] = cfg_set_partition12_high_qs;
      end

      addr_hit[46]: begin
        reg_rdata_next[31:0] = cfg_set_partition13_low_qs;
      end

      addr_hit[47]: begin
        reg_rdata_next[31:0] = cfg_set_partition13_high_qs;
      end

      addr_hit[48]: begin
        reg_rdata_next[31:0] = cfg_set_partition14_low_qs;
      end

      addr_hit[49]: begin
        reg_rdata_next[31:0] = cfg_set_partition14_high_qs;
      end

      addr_hit[50]: begin
        reg_rdata_next[31:0] = cfg_set_partition15_low_qs;
      end

      addr_hit[51]: begin
        reg_rdata_next[31:0] = cfg_set_partition15_high_qs;
      end

      addr_hit[52]: begin
        reg_rdata_next[31:0] = cfg_set_partition16_low_qs;
      end

      addr_hit[53]: begin
        reg_rdata_next[31:0] = cfg_set_partition16_high_qs;
      end

      addr_hit[54]: begin
        reg_rdata_next[31:0] = cfg_set_partition17_low_qs;
      end

      addr_hit[55]: begin
        reg_rdata_next[31:0] = cfg_set_partition17_high_qs;
      end

      addr_hit[56]: begin
        reg_rdata_next[31:0] = cfg_set_partition18_low_qs;
      end

      addr_hit[57]: begin
        reg_rdata_next[31:0] = cfg_set_partition18_high_qs;
      end

      addr_hit[58]: begin
        reg_rdata_next[31:0] = cfg_set_partition19_low_qs;
      end

      addr_hit[59]: begin
        reg_rdata_next[31:0] = cfg_set_partition19_high_qs;
      end

      addr_hit[60]: begin
        reg_rdata_next[31:0] = cfg_set_partition20_low_qs;
      end

      addr_hit[61]: begin
        reg_rdata_next[31:0] = cfg_set_partition20_high_qs;
      end

      addr_hit[62]: begin
        reg_rdata_next[31:0] = cfg_set_partition21_low_qs;
      end

      addr_hit[63]: begin
        reg_rdata_next[31:0] = cfg_set_partition21_high_qs;
      end

      addr_hit[64]: begin
        reg_rdata_next[31:0] = cfg_set_partition22_low_qs;
      end

      addr_hit[65]: begin
        reg_rdata_next[31:0] = cfg_set_partition22_high_qs;
      end

      addr_hit[66]: begin
        reg_rdata_next[31:0] = cfg_set_partition23_low_qs;
      end

      addr_hit[67]: begin
        reg_rdata_next[31:0] = cfg_set_partition23_high_qs;
      end

      addr_hit[68]: begin
        reg_rdata_next[31:0] = cfg_set_partition24_low_qs;
      end

      addr_hit[69]: begin
        reg_rdata_next[31:0] = cfg_set_partition24_high_qs;
      end

      addr_hit[70]: begin
        reg_rdata_next[31:0] = cfg_set_partition25_low_qs;
      end

      addr_hit[71]: begin
        reg_rdata_next[31:0] = cfg_set_partition25_high_qs;
      end

      addr_hit[72]: begin
        reg_rdata_next[31:0] = cfg_set_partition26_low_qs;
      end

      addr_hit[73]: begin
        reg_rdata_next[31:0] = cfg_set_partition26_high_qs;
      end

      addr_hit[74]: begin
        reg_rdata_next[31:0] = cfg_set_partition27_low_qs;
      end

      addr_hit[75]: begin
        reg_rdata_next[31:0] = cfg_set_partition27_high_qs;
      end

      addr_hit[76]: begin
        reg_rdata_next[31:0] = cfg_set_partition28_low_qs;
      end

      addr_hit[77]: begin
        reg_rdata_next[31:0] = cfg_set_partition28_high_qs;
      end

      addr_hit[78]: begin
        reg_rdata_next[31:0] = cfg_set_partition29_low_qs;
      end

      addr_hit[79]: begin
        reg_rdata_next[31:0] = cfg_set_partition29_high_qs;
      end

      addr_hit[80]: begin
        reg_rdata_next[31:0] = cfg_set_partition30_low_qs;
      end

      addr_hit[81]: begin
        reg_rdata_next[31:0] = cfg_set_partition30_high_qs;
      end

      addr_hit[82]: begin
        reg_rdata_next[31:0] = cfg_set_partition31_low_qs;
      end

      addr_hit[83]: begin
        reg_rdata_next[31:0] = cfg_set_partition31_high_qs;
      end

      addr_hit[84]: begin
        reg_rdata_next[0] = commit_partition_cfg_qs;
      end

      addr_hit[85]: begin
        reg_rdata_next[31:0] = flushed_set0_low_qs;
      end

      addr_hit[86]: begin
        reg_rdata_next[31:0] = flushed_set0_high_qs;
      end

      addr_hit[87]: begin
        reg_rdata_next[31:0] = flushed_set1_low_qs;
      end

      addr_hit[88]: begin
        reg_rdata_next[31:0] = flushed_set1_high_qs;
      end

      addr_hit[89]: begin
        reg_rdata_next[31:0] = flushed_set2_low_qs;
      end

      addr_hit[90]: begin
        reg_rdata_next[31:0] = flushed_set2_high_qs;
      end

      addr_hit[91]: begin
        reg_rdata_next[31:0] = flushed_set3_low_qs;
      end

      addr_hit[92]: begin
        reg_rdata_next[31:0] = flushed_set3_high_qs;
      end

      default: begin
        reg_rdata_next = '1;
      end
    endcase
  end

  // Unused signal tieoff

  // wdata / byte enable are not always fully used
  // add a blanket unused statement to handle lint waivers
  logic unused_wdata;
  logic unused_be;
  assign unused_wdata = ^reg_wdata;
  assign unused_be = ^reg_be;

  // Assertions for Register Interface
  `ASSERT(en2addrHit, (reg_we || reg_re) |-> $onehot0(addr_hit))

endmodule
